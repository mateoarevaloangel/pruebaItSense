@page "/"
@attribute [StreamRendering]
@inject HttpClient Http
@using ClientePrueba.Model
@using ClientePrueba.Service.Interface
@using System.Text.Json;

<PageTitle>Home</PageTitle>

@if (products == null)
{
    <p><em>Loading...</em></p>
}
else
{
    /*<EditForm Model="productAdd2" OnSubmit="enviar">
        // Resto del formulario
        <button type="submit">Enviar formulario </button>
    </EditForm>*/
    <EditForm Model="productAdd2" OnSubmit="enviar" FormName="addproduct2">
                <InputText id="name" class="form-control" @bind-Value="productAdd2.Name" @formname="addproduct2" />
                <InputNumber id="Stock" class="form-control" @bind-Value="productAdd2.Stock" @formname="addproduct2"/>
                <InputCheckbox id="Status" class="form-check_input" @bind-Value="productAdd2.Status" @formname="addproduct2"/>
                <input class="btn btn-primary" type="submit" value="Submit" @formname="addproduct2">
    </EditForm>
    <h3>@productAdd2.Name</h3>
    
    /*<EditForm Model="productAdd" OnSubmit="enviar"FormName="addproduct2">
        <div class="form-group row">
            <label for="name" class="col-md-2 col-form-label">Nombre:</label>
            <div class="col-md-10">
                <InputText id="name" class="form-control" @bind-Value="productAdd.Name"  @formname="addproduct2"/>
            </div>
        </div>
        <InputNumber id="Stock" class="form-control" @bind-Value="productAdd.Stock" @formname="addProduct3" />
        <InputCheckbox id="Status" class="form-check_input" @bind-Value="productAdd.Status" @formname="addProduct3" />
        <button type="submit">Enviar formulario </button>
    </EditForm>*/
    <table class="table">
        <thead>
            <tr>
                <th>Nombre</th>
                <th>Stock</th>
                <th>Status</th>
                <th>Opcion</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                
                <td><InputText id="name" class="form-control" @bind-Value="productAdd.Name" @formname="addProduct3"/></td>
                <td><InputNumber id="Stock" class="form-control" @bind-Value="productAdd.Stock" @formname="addProduct3" /></td>
                <td><InputCheckbox id="Status" class="form-check_input" @bind-Value="productAdd.Status" @formname="addProduct3" /></td>
                <th><EditForm FormName="addProduct3" Model="productAdd" OnSubmit="enviar"><Button Color="ButtonColor.Primary" type="submit" @formname="addProduct3"> Agregar </Button></EditForm></th>
                
                
            </tr>
            @foreach (var product in products)
            {
                <tr>
                    <td>@product.Name</td>
                    <td><InputNumber id="Stock" class="form-control" @bind-Value="product.Stock" /></td>
                    <td><InputCheckbox id="Status" class="form-check_input" @bind-Value="product.Status" /></td>
                    <td><Button Color="ButtonColor.Secondary"> Editar </Button></td>
                </tr>
            }
        </tbody>
    </table>
}
@code {
    private Product[]? products;
    private ProductDTO productEdit = new ProductDTO();
    private ProductDTO productAdd = new ProductDTO();
    private ProductDTO productAdd2 = new ProductDTO();
    private readonly IProductService productService;

    /*public ProductsController(IProductService productService)
        {
        this.productService = productService;
    }*/

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);
        products  = await Http.GetFromJsonAsync<Product[]>("https://localhost:7182/api/Products");
    }

    private async Task enviar()
    {
        Console.Write(productAdd2.Name);
        Console.Write(productAdd2);
    }

    private async Task AddProduct()
    {
        var stringContent = new StringContent(JsonSerializer.Serialize(productAdd));
        var response = await Http.PostAsync("https://localhost:7182/api/Products", stringContent);
        if (response.IsSuccessStatusCode)
        {
            // Read the response content
            string content = await response.Content.ReadAsStringAsync();
            Console.WriteLine(content);
        }
        else
        {
            Console.WriteLine($"Error: {response.StatusCode}");
        }
        //var response = await httpClient.PostAsync("http://www.sample.com/write", stringContent);

        // Send the request using SendAsync
       /* HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Post, "https://localhost:7182/api/Products", productAdd);
        HttpResponseMessage response = await Http.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            // Read the response content
            string content = await response.Content.ReadAsStringAsync();
            Console.WriteLine(content);
        }
        else
        {
            Console.WriteLine($"Error: {response.StatusCode}");
        }*/
    } 
}

