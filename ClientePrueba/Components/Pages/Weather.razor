@page "/weather"
@attribute [StreamRendering]
@using ClientePrueba.Model

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
<EditForm FormName="addProduct" Model="productAdd2" OnSubmit="enviar">

          <InputText id="name" class="form-control" @bind-Value="productAdd2.Name" @formname="addProduct" />
                <InputNumber id="Stock" class="form-control" @bind-Value="productAdd2.Stock" @formname="addProduct"/>
                <InputCheckbox id="Status" class="form-check_input" @bind-Value="productAdd2.Status" @formname="addProduct"/>
        <input type="submit" value="Submit" class="btn btn-primary" @formname="addProduct" />
    </EditForm>
<h1>@productAdd2.Name</h1>
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;
    private ProductDTO productAdd2 { get; set; } = new ProductDTO();

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast
        {
            Date = startDate.AddDays(index),
            TemperatureC = Random.Shared.Next(-20, 55),
            Summary = summaries[Random.Shared.Next(summaries.Length)]
        }).ToArray();
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
    private  void enviar()
    {
        Console.WriteLine("aca");
    }
}
